---
layout: post
title: Peter Norvig - What to demand from a Scientific Computing Language
---

h1. {{ page.title }}

p(meta). 20 December 2009 - James - Brooklyn

<a href="http://www.archive.org/details/scipy09_day1_03-Peter_Norvig">Peter Norvig - Keynote: What to demand from a Scientific Computing Language -- Even if you don't care about computing or languages</a>

Peter Norvig explains why he came to Python. Quite simply, it looked a lot like pseudo-code and his students couldn't understand LISP. There's clearly more to it, but it's his to explain.

While speaking, he covers his views on the goals of scientific computing and lists a couple software projects under machine learning.

<a href="/images/2009-12-20-peter-norvig-scientific-computing/scientific_computing.png"><img src="/images/2009-12-20-peter-norvig-scientific-computing/shrunk/scientific_computing.png"></a>

* Weka - <a href="http://kogs-www.informatik.uni-hamburg.de/~meine/weka-python/">http://kogs-www.informatik.uni-hamburg.de/~meine/weka-python/</a>
* BNT - Bayes Network Toolkit? (<a href="mailto:jd@j2labs.net?subject=bnt">does anyone know?</a>)
* Orange - <a href="http://www.ailab.si/orange/">http://www.ailab.si/orange/</a>
* PyML - <a href="http://pyml.sourceforge.net/">http://pyml.sourceforge.net/</a>

Those in the upper levels of Academia may appreciate Norvig's humor here. In grey, are the usual things scientists do. Norvig suggests the steps in black were left out by mistake.

<a href="/images/2009-12-20-peter-norvig-scientific-computing/what_do_scientists_do.png"><img src="/images/2009-12-20-peter-norvig-scientific-computing/shrunk/what_do_scientists_do.png"></a>

I'm curious if Peter Norvig has written anything regarding Mechanical Turk. He puts a market place for data gathering in his list of methods to Observer and Explore.

<a href="/images/2009-12-20-peter-norvig-scientific-computing/observe_and_explore.png"><img src="/images/2009-12-20-peter-norvig-scientific-computing/shrunk/observe_and_explore.png"></a>

There seems to be no mention of <i>turk</i> on his <a href="http://norvig.com">web page</a> anywhere...

Peter worked with a team that could detect diseases <i>about a week or two faster</i> than other sources at determining how tough the flu season will be.

<a href="/images/2009-12-20-peter-norvig-scientific-computing/detect_flu.png"><img src="/images/2009-12-20-peter-norvig-scientific-computing/shrunk/detect_flu.png"></a>

Of Python, Peter says, <i>"It's just a few lines to parse the maze into a set of states and then you set up these three tables of probabailities that the hidden markov model needs. You need a distribution over the start state and I just said that's uniform, you can start anywhere. You need the transitions, which are the observations and I define the observation function as the four walls around it. And so that was very nice that in this half a page of code I was able to go from this model parsing the representation of the room and get it into the form it needed and in other languages that would've been 3 or 4 pages instead of half a page. So that was ideal."</i>

<a href="/images/2009-12-20-peter-norvig-scientific-computing/half_page.png"><img src="/images/2009-12-20-peter-norvig-scientific-computing/shrunk/half_page.png"></a>

Peter brings up a slide for Naive Bayes word modeling and mentions using a Python Decorator for memoization. I had not considered implementing memoization this way, but now that I've come across it, I can't imagine doing it a different way. It's so concise. Notice the <code>@memo</code> at the top?

<a href="/images/2009-12-20-peter-norvig-scientific-computing/memoizator.png"><img src="/images/2009-12-20-peter-norvig-scientific-computing/shrunk/memoizator.png"></a>

I found this <a href="http://avinashv.net/2008/04/python-decorators-syntactic-sugar/">blog post</a> compelling for decorators. Memoization is covered. I have had good success using a decorator from Django for requiring authentication properties for specific functions using <code>@login_required</code>.

Here is a graph generated from Python.

<a href="/images/2009-12-20-peter-norvig-scientific-computing/plot.png"><img src="/images/2009-12-20-peter-norvig-scientific-computing/shrunk/plot.png"></a>

<i>I think that was the appropriate amount of work to get there.</i> 

--

<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/us/"><img alt="Creative Commons License" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/us/80x15.png" /></a>
