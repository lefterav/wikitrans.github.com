---
layout: post
title: Running wikitrans locally
---

h1. {{ page.title }}

p(meta). 04 January 2010 - James - Brooklyn

h2. Setting up the environment

First we need to install some apps and then configure our virutual environment. I use <a href="http://www.macports.org/">Mac Ports</a> but it's not too different to setup a Linux machine. Then pick a directory for where the virtualenv will store it's data. I like to use ~/.virtualenv/. <a href="http://pypi.python.org/pypi/virtualenv">Virtualenv</a> will fail if this directory doesn't exist.

<script src="http://gist.github.com/269150.js"></script>

The next lines should be put in your environment and then sourced into any shells you're working with. Check the paths against what your system uses. On Ubuntu 9.4 there was no virtualenvwrapper package so I downloaded the source and put it in my src directory and used ~/src/virtualenv-src/virtualenvwrapper_bashrc.

<script src="http://gist.github.com/269151.js"></script>

h2. Setting up the system

WikiTrans relies on many packages for it's functionality. There is a snapshot of pinax on my github page that I build against. We will clone that and then clone wikitrans.

I keep my source code in a Projects directory on my laptop.

<script src="http://gist.github.com/269152.js"></script>

You will notice your shell's prompt is a bit different. It should have (dev-wikitrans) in front of it now. This is telling you that you have activated the dev-wikitrans virtual environment. If you type 'which python', you will see that it now points to /your/home/dir/.virtualenvs/dev-wikitrans/bin/python. You also have access to <a href="http://pypi.python.org/pypi/pip/0.6.1">pip</a>. Pip is a tool for installing Python packages from the <a href="http://pypi.python.org/">Python Package Index</a>. <a href="http://wikitrans.github.com/2009/10/19/goopytrans.html">Goopytrans</a>, <a href="http://wikitrans.github.com/2009/10/19/wikipydia.html">Wikipydia</a> and <a href="http://wikitrans.github.com/2009/12/16/pyango-view.html">Pyango View</a> <a href="http://pypi.python.org/pypi/goopytrans/0.1.1">all</a>, <a href="http://pypi.python.org/pypi/wikipydia/0.1.3">live</a> <a href="http://pypi.python.org/pypi/pyango_view/0.1">there</a>.

Anyway, we have only done some preliminary setup. This next step is gonna take a little while.

<script src="http://gist.github.com/269153.js"></script>

This fetches everything from the Pinax project and install pinax into the virtual environment. We use a similar file for setting up the wikitrans environment too. Once the external_apps install is finished, we use wikitran's requirements.txt file to configure it's environment.

There is a bug that I can't explain just yet with pyyaml so will install it first. It seems to work when we do this rather than letting pip install it as part of the requirements file. ANYWAY.

<script src="http://gist.github.com/269154.js"></script>

Assuming everything installed correctly we are just about ready to go. We have to download all of the data nltk requires too. This will create an nltk_data directory in your home directory. We require the configuration files for the punkt tokenizer to understand how to split up sentences.

<script src="http://gist.github.com/269155.js"></script>

Let's turn it on! The syncdb step synchronizes the database against the described data models and offers a chance for apps to also run some functionality. It uses a signals framework for this. One of the operations that gets called is one to create the admin user and so during this step it will ask you for a username, email and password. This will be the first user account created in the system. 'runserver' is how we turn on Django's built in webserver. It's not meat to be used for production but makes it easy to develop locally.

<script src="http://gist.github.com/269156.js"></script>

If that command is working for you, try going to <a href="http://127.0.0.1:8000">http://127.0.0.1:8000</a>. One of the really neat things about Django development is the good design of URL's. It's basically a side-effect of how Django works, but it also let's me send you a local URL for me that works, but also for you. 

Try poking around the site a little bit. I would go to the <a href="http://127.0.0.1:8000/articles/request_translation/">Request Translation</a> page and request "Foobar" with a title language of Spanish and a target language of English. If someone gives us a title, they must also give us the language of the Title. For example, 'Johns Hopkins University' is 'Universidad Johns Hopkins' in Spanish. Knowing which language we're looking at saves us having to issue a search query for language offerings every time we want to load an article by it's title.

h2. The admin page

You can see the entire database system for any Django by visiting the top level of the <a href="http://127.0.0.1:8000/admin">admin page</a>. This page is very useful for quickly constructing data while developing a web site. Once some data is constructed, you can export it using Django's dumpdata command and reimport it using loaddata. And, if you have some data that you want initialized everytime you generate the database, to bootstrap the system, you put that data extract in a file called 'initial_data.json' in a fixtures folder inside your apps. For example, try 'cat wt_languages/fixtures/initial_data.json'. You'll see a defaut language competency for the first user in the system. Feel free to change it.

The Translation Request you entered for "Foobar" put an entry in the ArticleOfInterest table. See for yourself <a href="http://127.0.0.1:8000/admin/wt_articles/articleofinterest/">here</a>. Wikitrans generally lives in two applications: <a href="http://127.0.0.1:8000/admin/wt_articles">wt_articles</a> and <a href="http://127.0.0.1:8000/admin/wt_languages/">wt_languages</a>. 

h2. Batches

I currently have two batches that are important for development. There are two more batch files for handling email distribution, but those are beyond the scope of this entry. Anyway. 

The first command, update_wiki_articles, reads the entries from the ArticleOfInterest table, uses wikipydia to communicate with Wikipedia, and fetches the articles. When it saves the articles to the data, it also splits the articles into sentences, using the Punkt tokenizer from <a href="http://www.nltk.org/">NLTK</a>. After a successful run you will see the articles <a href="http://127.0.0.1:8000/admin/wt_articles/sourcearticle/">here</a> and the sentences <a href="http://127.0.0.1:8000/admin/wt_articles/sourcesentence/">here</a>.

Now that you've consumed an article from Wikipedia and split it into sentence segments a Translation Request is generated. That will be here <a href="http://127.0.0.1:8000/admin/wt_articles/translationrequest/">here</a>. The next batch command, translate_google, will search the Translatation Request table for any entries with Google marked as the translator and uses Goopytrans to have Google translate the sentences one by one. We are getting close to having Mechanical Turk hooked in and will be translating via MTurk sentence by sentence also. It also possible to mark a request to be translated by a human, but this has no purpose implemented yet.

After an article has been translated, you will see it in <a href="http://127.0.0.1:8000/articles/list/">The Article List</a>. This list is populated by what languages you have marked yourself competent in. By default, you are marked competent in Spanish as part of the bootstrapping setup from wt_languages.

The <a href="http://127.0.0.1:8000/articles/">Articles landing page</a> is set manually right now. It'd be cool to have this an automated process eventually but I'm not sure how to determine what should be featured yet. Anyway. go <a href="http://127.0.0.1:8000/admin/wt_articles/featuredtranslation/add/">here</a> to pick a Translated Article. Refresh the landing page and there is your article.

h2. Educational destruction

Part of development is breaking things for progress. WikiTrans comes bundled with <a href="http://werkzeug.pocoo.org/">Werkzeug</a> as part of the code base so let's break the system and see what it offers us. Open up ~/Projects/wikitrans/wt-app/settings.py and put a comment (# symbol) at the beginning of the line that says "DATABASE_ENGINE='sqlite3'". This will disable the database system and produce an error page on the <a href="http://127.0.0.1:8000">landing</a>. If you put your mouse on one of the dark grey lines that has code on it, you will see two icons on the right side appear. The one that looks like a terminal actually offers a interactive terminal at each code level in the stack output. The icon that looks like a page will expose the relevant code.

Amazing, right? Werkzeug is pretty incredible. Don't forget to remove the comment character from line 26 in settings.py.

h2. Conclusion

And so that's the gist of how you can get the WikiTrans codebase running locally.

--

<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/us/"><img alt="Creative Commons License" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/us/80x15.png" /></a>
